// Generated by gencpp from file quadrotor_state_machine/StateCommand.msg
// DO NOT EDIT!


#ifndef QUADROTOR_STATE_MACHINE_MESSAGE_STATECOMMAND_H
#define QUADROTOR_STATE_MACHINE_MESSAGE_STATECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadrotor_state_machine
{
template <class ContainerAllocator>
struct StateCommand_
{
  typedef StateCommand_<ContainerAllocator> Type;

  StateCommand_()
    : next()
    , current()  {
    }
  StateCommand_(const ContainerAllocator& _alloc)
    : next(_alloc)
    , current(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _next_type;
  _next_type next;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> const> ConstPtr;

}; // struct StateCommand_

typedef ::quadrotor_state_machine::StateCommand_<std::allocator<void> > StateCommand;

typedef boost::shared_ptr< ::quadrotor_state_machine::StateCommand > StateCommandPtr;
typedef boost::shared_ptr< ::quadrotor_state_machine::StateCommand const> StateCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_state_machine::StateCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace quadrotor_state_machine

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'quadrotor_state_machine': ['/home/ubuntu/Quadrotor/catkin_ws/src/quadrotor_state_machine/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "928bf34b732b7e32d1524eb9acbd1715";
  }

  static const char* value(const ::quadrotor_state_machine::StateCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x928bf34b732b7e32ULL;
  static const uint64_t static_value2 = 0xd1524eb9acbd1715ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_state_machine/StateCommand";
  }

  static const char* value(const ::quadrotor_state_machine::StateCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string next\n\
string current\n\
";
  }

  static const char* value(const ::quadrotor_state_machine::StateCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.next);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_state_machine::StateCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_state_machine::StateCommand_<ContainerAllocator>& v)
  {
    s << indent << "next: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.next);
    s << indent << "current: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_STATE_MACHINE_MESSAGE_STATECOMMAND_H
